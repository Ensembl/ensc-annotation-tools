/*
 * Copyright [1999-2018] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef __ROUGHTRANSCRIPTS_H__
#define __ROUGHTRANSCRIPTS_H__

#include <config.h> //Generated by configure

#include "ensc/DBAdaptor.h"
#include "ensc/Vector.h"
#include "ensc/Slice.h"
#include "ensc/StringHash.h"
#include "ensc/Analysis.h"
#include "ensc/Transcript.h"
#include "ensc/DNAAlignFeature.h"

#include "htslib/sam.h"

#include "libconfig.h"

typedef struct RoughTranscriptsStruct {
  char *inputId;
  char *targetDb;
  char *bamFile;

  int minSingleExonLength;
  int maxIntronSize;
  int minLength;

  float minSpan;

  int verbosity;
  int threads;
  int ucsc_naming;

  int isPaired;
  int isStranded;

  Slice *chrSlice;

  StringHash *funcHash;

  Vector *output;
  Vector *forward;
  Vector *reverse;

  StringHash *adaptorAliasHash;

  Analysis *analysis;

  DBAdaptor *db;

  config_setting_t *databaseConfig;
} RoughTranscripts;

typedef struct DAFClusterStruct {
  int index;
  DNAAlignFeature *feature;
  Vector *links;
} DAFCluster;

typedef (*IntSetFunc)(RoughTranscripts *rsg, int val);
typedef (*Int64SetFunc)(RoughTranscripts *rsg, long val);
typedef (*FloatSetFunc)(RoughTranscripts *rsg, double val);
typedef (*StringSetFunc)(RoughTranscripts *rsg, const char *val);
typedef (*BoolSetFunc)(RoughTranscripts *rsg, int val);
typedef (*VectorSetFunc)(RoughTranscripts *rsg, Vector *val);
typedef union {
  IntSetFunc setIntValue;
  Int64SetFunc setInt64Value;
  FloatSetFunc setFloatValue;
  StringSetFunc setStringValue;
  BoolSetFunc setBoolValue;
  VectorSetFunc setVectorValue;
} SetFunc;

typedef (*SetSubFunc)(RoughTranscripts *rsg, config_setting_t *subSetting);
typedef struct SetFuncDataStruct {
  int type;
  int subType;
  SetSubFunc subFunc;
  SetFunc setFunc;
} SetFuncData;

RoughTranscripts *RoughTranscripts_new(char *configFile, char *logicName, char *inputId, int threads, int ucsc_naming, int verbosity);
void RoughTranscripts_fetchInput(RoughTranscripts *rsg);
void  RoughTranscripts_run(RoughTranscripts *rsg);
void RoughTranscripts_writeOutput(RoughTranscripts *rsg);

void RoughTranscripts_dumpConfig(RoughTranscripts *rsg);
void RoughTranscripts_dumpOutput(RoughTranscripts *rsg);
Slice *RoughTranscripts_fetchSequence(RoughTranscripts *rsg, char *name, DBAdaptor *db, Vector *repeatMaskTypes, int softMask);
int dumpGenes(Vector *genes, int withSupport);

void RoughTranscripts_addToOutput(RoughTranscripts *rsg, Gene *gene);
Vector *RoughTranscripts_getOutput(RoughTranscripts *rsg);
DBAdaptor *BaseGeneBuild_getDbAdaptor(RoughTranscripts *rsg, char *alias, int isNonStandard, int dontUseDnaDb);

void RoughTranscripts_initSetFuncs(RoughTranscripts *rsg);
void RoughTranscripts_setAnalysis(RoughTranscripts *rsg, Analysis *analysis);
Analysis *RoughTranscripts_getAnalysis(RoughTranscripts *rsg);
Analysis *RoughTranscripts_createAnalysisObject(RoughTranscripts *rsg, char *logicName);
void RoughTranscripts_bamToExonFeatures(RoughTranscripts *rsg);
void RoughTranscripts_processClusters(RoughTranscripts *rsg, Vector *clusters);

void RoughTranscripts_processMatePairs(bam1_t *read, DAFCluster *cluster, Vector *current, int index, int *last_pairing);
int RoughTranscripts_isTranscriptValid(Transcript *transcript, int min_length, int min_single_exon_length, float min_span);
int RoughTranscripts_processLink(DAFCluster *object, Vector *cluster, int index);

Slice *RoughTranscripts_getSlice(RoughTranscripts *rsg);
void RoughTranscripts_setSlice(RoughTranscripts *rsg, Slice *slice);
void RoughTranscripts_setTargetDb(RoughTranscripts *rsg, char *targetDb);
char *RoughTranscripts_getTargetDb(RoughTranscripts *rsg);
void RoughTranscripts_setBamFile(RoughTranscripts *rsg, char *file);
char *RoughTranscripts_getBamFile(RoughTranscripts *rsg);
void RoughTranscripts_setDataPaired(RoughTranscripts *rsg, int isPaired);
int RoughTranscripts_isDataPaired(RoughTranscripts *rsg);
void RoughTranscripts_setDataStranded(RoughTranscripts *rsg, int isStranded);
int RoughTranscripts_isDataStranded(RoughTranscripts *rsg);
void RoughTranscripts_setMinLength(RoughTranscripts *rsg, int minLength);
int RoughTranscripts_getMinLength(RoughTranscripts *rsg);
void RoughTranscripts_setMinSpan(RoughTranscripts *rsg, float maxIntronSize);
float RoughTranscripts_getMinSpan(RoughTranscripts *rsg);
void RoughTranscripts_setMaxIntronSize(RoughTranscripts *rsg, int maxIntronSize);
int RoughTranscripts_getMaxIntronSize(RoughTranscripts *rsg);
void RoughTranscripts_setMinSingleExonLength(RoughTranscripts *rsg, int minSingleExonLength);
int RoughTranscripts_getMinSingleExonLength(RoughTranscripts *rsg);
void RoughTranscripts_setForwardExons(RoughTranscripts *rsg, Vector *exons);
Vector *RoughTranscripts_getForwardExons(RoughTranscripts *rsg);
void RoughTranscripts_setReverseExons(RoughTranscripts *rsg, Vector *exons);
Vector *RoughTranscripts_getReverseExons(RoughTranscripts *rsg);

void RoughTranscripts_setVerbosity(RoughTranscripts *rsg, int verbosity);
int RoughTranscripts_getVerbosity(RoughTranscripts *rsg);
void RoughTranscripts_setThreads(RoughTranscripts *rsg, int threads);
int RoughTranscripts_getThreads(RoughTranscripts *rsg);
void RoughTranscripts_setUcscNaming(RoughTranscripts *rsg, int ucsc_naming);
int RoughTranscripts_getUcscNaming(RoughTranscripts *rsg);

void RoughTranscripts_setDb(RoughTranscripts *rsg, DBAdaptor *db);
DBAdaptor *RoughTranscripts_getDb(RoughTranscripts *rsg);
void RoughTranscripts_setInputId(RoughTranscripts *rsg, char *inputId);
char *RoughTranscripts_getInputId(RoughTranscripts *rsg);
void RoughTranscripts_setDatabaseConfig(RoughTranscripts *rsg, config_setting_t *setting);
config_setting_t *RoughTranscripts_getDatabaseConfig(RoughTranscripts *rsg);

DAFCluster *DAFCluster_new(DNAAlignFeature *daf);
void DAFCluster_setStart(DAFCluster *cluster, int start);
void DAFCluster_setEnd(DAFCluster *cluster, int end);
long DAFCluster_getStart(DAFCluster *cluster);
long DAFCluster_getEnd(DAFCluster *cluster);
void DAFCluster_incrementHCoverage(DAFCluster *cluster);
void DAFCluster_incrementScore(DAFCluster *cluster);
void DAFCluster_free(DAFCluster *cluster);

Exon *ExonUtils_createExon(long start, long end, int phase, int endPhase, int strand, Analysis *analysis, Vector *supportingFeatures, IDType dbId, Slice *slice, char *stableId, int version);

void RunnableDB_readAndCheckConfig(RoughTranscripts *rsg, char *configFile, char *blockName, char *logicName);
void RunnableDB_readDatabaseConfig(RoughTranscripts *rsg, char *configFile);
void Utilities_parseConfig(RoughTranscripts *rsg, config_setting_t *cfgBlock, char *label, int ignoreThrow);
char *ConfigConverter_typeCodeToString(int code);
void ConfigConverter_wrapSetCall(RoughTranscripts *rsg, SetFuncData *setFuncData, config_setting_t *setting);
void ConfigConverter_wrapGroupSetCall(RoughTranscripts *rsg, SetFuncData *setFuncData, config_setting_t *setting);
void ConfigConverter_wrapListSetCall(RoughTranscripts *rsg, SetFuncData *setFuncData, config_setting_t *setting);
void ConfigConverter_wrapArraySetCall(RoughTranscripts *rsg, SetFuncData *setFuncData, config_setting_t *setting);
SetFuncData *SetFuncData_new(void *func, int type);
void SetFuncData_free(SetFuncData *sfd);
#endif
